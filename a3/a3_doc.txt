= FILES =====================================================================
Chat client files
chatserver_manager.c:     Handles the creating, initializing, refreshing and
                          destroying the chat server manager. The chat server
                          manager  keeps track of what chat server the user is
                          connected to.
client_core.c:            Interacts with the client core struct, which maintains
                          the chat client information, such as the registered
                          name, the sending information and receiver information.
                          Forwards control requests and chat message, and
                          contains functions for initializing the heartbeat
                          mechanism.
client_main.c:            Contains the initial functions to handle user input,
                          create the chat receiver, and to initialize necessary
                          structs.
client_to_server_sender.c:Handles communication between the chat client and the
                          chat server. Contains functions to send control
                          requests over a TCP connection and parse the response,
                          to send a chat message, to register with a chat server
                          and to send heartbeat messages to the chat server.
client_util.c:            Functions for dealing with a location server, like
                          getting the location server's information.
http_connection.c:        Contains functions for creating, sending a message on
                          and closing a http connection.
receiver_mgr.c:           Manages communication between the chat client and the
                          chat receiver, which involves the initialization of
                          the IPC channel, and sending and receiving messages
                          over the ICP channel.
tcp_connection.c:         Contains functions used for creating and closing a tcp
                          connection, along with sending a message on the tcp
                          connection.
udp_connection.c:         Contains functions used for creating and closing a udp
                          connection, along with sending a message through the
                          udp connection.

Chat receiver files
client_recv.c:            The chat receiver, which manages an IPC channel with
                          the chat client, typically printing whatever the chat
                          client send to the receiver, and maintains a UDP
                          connection with the chat server in order to get all
                          the chat messages that a client is supposed to see.


= DESIGN ====================================================================

3 main components: chatserver, chatclient, receiver

chatserver -------UDP------------
 | ^    ^                       |
 | |    |                       |
 | |    |                       |
 TCP   UDP                      |
 | |    |                       |
 | |    |                       |
 V |    |                       V
chatclient<-------IPC------->receiver


Program start up:
  - Initialize the chat client.
  - Start the receiver.
  - Create the IPC channel from the chatclient to the receiver, where the
    receiver's response is the udp port it'll use to receive messages on from
    the chat server
  - Create a TCP connection with the chatserver, and attempt to register the
    user with the chat server.

User sends a control request
  - Chatclient gets user input for a control request.
  - chatclient creates a TCP connection with the chatserver then sends a TCP
    message, receiving a TCP message with a response in return.
  - The chatclient parses the response, modifying the client's local, cached
    state, and send an appropriate message through the IPC channel to the
    chatreceiver if needed, where the receiver prints out the received message.

User sends a chat message
  - Chatclient gets user input that is a chat message.
  - The chatclient formulates a chat message UDP packet, and send that to the
    chatserver.
  - The chatserver sees the message, broadcasting it to all the members in the
    room.
  - The receiver receives a UDP packer containing a message from a user that
    is in the same room as the client. The receiver prints out the
    received chat message.


= FAULT TOLERANCE ===========================================================

Heartbeat:involves the chatclient sending a KEEP_MEMBER_ALIVE TCP message to
          the chatserver every 5 seconds. If the chatserver does not respond
          to the TCP SYN message, the connection with the server is regarded
          as unusable. Then the client will attempt to reestablish a connection
          with the location server if available, otherwise a local running chat
          server.

